{
    "sourceFile": "python-service/routes/serviceData_routes.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 50,
            "patches": [
                {
                    "date": 1716847099081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716847598517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 1\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716847603951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 1\r\n+@serviceData_bp.route('/serviceData/ServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716847935680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 1\r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716848488895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName,\r\n+                COUNT(*) AS UsageCount,\r\n+                (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100 AS PercentageUsage\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716848497236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName,\r\n+                COUNT(*) AS UsageCount,\r\n+                (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100 AS PercentageUsage\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716848892233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,435 +82,4 @@\n         return jsonify({'error': str(e)})\r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName,\r\n-                COUNT(*) AS UsageCount,\r\n-                (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100 AS PercentageUsage\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 1\r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 1\r\n-@serviceData_bp.route('/serviceData/ServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 1\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n"
                },
                {
                    "date": 1716849527421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,4 +82,5 @@\n         return jsonify({'error': str(e)})\r\n \r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1716849820179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,4 +83,5 @@\n \r\n \r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1716849884484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,14 @@\n         cursor = conn.cursor()\r\n         # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n             SELECT \r\n-                TransactionTypeName,\r\n-                COUNT(*) AS UsageCount,\r\n-                (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100 AS PercentageUsage\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n+    TransactionTypeName,\r\n+    COUNT(*) AS UsageCount,\r\n+    (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100.0 AS PercentageUsage\r\n+FROM rmit.FactTransaction_sub\r\n+WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+GROUP BY TransactionTypeName;\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n         usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n"
                },
                {
                    "date": 1716849892548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+            TransactionTypeName,\r\n+            COUNT(*) AS UsageCount,\r\n+            (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100.0 AS PercentageUsage\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName;\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716849963463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName,\r\n+                COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716850012796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,9 @@\n         cursor = conn.cursor()\r\n         # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n             SELECT \r\n-                TransactionTypeName,\r\n-                COUNT(*) AS UsageCount\r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n             FROM rmit.FactTransaction_sub\r\n             WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n             GROUP BY TransactionTypeName\r\n         \"\"\")\r\n"
                },
                {
                    "date": 1716850035343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n def get_usage_percentage():\r\n     try:\r\n         conn = get_db_connection()\r\n         cursor = conn.cursor()\r\n-        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n             SELECT \r\n                 TransactionTypeName, COUNT(*) AS UsageCount\r\n             FROM rmit.FactTransaction_sub\r\n"
                },
                {
                    "date": 1716851489163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716851503005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716852047995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_percentage():\r\n+def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n         cursor = conn.cursor()\r\n         # Query to get the total revenue per service for 2023 and 2024\r\n@@ -111,383 +111,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-            TransactionTypeName,\r\n-            COUNT(*) AS UsageCount,\r\n-            (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100.0 AS PercentageUsage\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName;\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to count the occurrences of each TransactionTypeName for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-    TransactionTypeName,\r\n-    COUNT(*) AS UsageCount,\r\n-    (COUNT(*) / (SELECT COUNT(*) FROM rmit.FactTransaction_sub WHERE YEAR(TransactionDate) IN (2023, 2024))) * 100.0 AS PercentageUsage\r\n-FROM rmit.FactTransaction_sub\r\n-WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-GROUP BY TransactionTypeName;\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1716852121691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,8 @@\n         cursor.execute(\"\"\"\r\n             SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n             FROM rmit.FactTransaction_sub\r\n             WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n         revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n"
                },
                {
                    "date": 1716852140297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716852761825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,117 +110,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1716852803399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+    \r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461616554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from flask import Blueprint, jsonify\r\n+                                 from flask import Blueprint, jsonify\r\n from db_config import get_db_connection\r\n \r\n serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n \r\n"
                },
                {
                    "date": 1717461634471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461640211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,91 +3,11 @@\n \r\n serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n \r\n \r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n \r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n \r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n \r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-                                 from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n # Data Point 2\r\n @serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n def get_transaction_counts():\r\n     try:\r\n@@ -158,152 +78,9 @@\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n \r\n     \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n \r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n \r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n \r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n \r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n \r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-    \r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717461670332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461678604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+#Dt    \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461686061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-#Dt    \r\n+#Data     \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n"
                },
                {
                    "date": 1717461693877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-#Data     \r\n+# Data point 3     \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n@@ -113,206 +113,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717461701155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-# Data point 3     \r\n+# Data point 3: text      \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n"
                },
                {
                    "date": 1717461708479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-# Data point 3: text      \r\n+# Data point 3: text total     \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n"
                },
                {
                    "date": 1717461724578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-# Data point 3: text total     \r\n+# Data point 2: text total     \r\n @serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n def get_revenue_total():\r\n     try:\r\n         conn = get_db_connection()\r\n"
                },
                {
                    "date": 1717461753160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,30 +85,9 @@\n \r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n \r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n     \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1717461759581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,32 @@\n         return jsonify(result)\r\n     except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n     \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+    \r\n # Data Point 3\r\n @serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n def get_revenue_percentage():\r\n     try:\r\n"
                },
                {
                    "date": 1717461766404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461978357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@app.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        # Sort the services by percentage contribution in descending order\r\n+        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n+\r\n+        # Get the top 10 services (change this number as needed)\r\n+        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717461987159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT \r\n+                TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        # Sort the services by percentage contribution in descending order\r\n+        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n+\r\n+        # Get the top 10 services (change this number as needed)\r\n+        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717463331912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,392 +148,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@app.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        # Sort the services by percentage contribution in descending order\r\n-        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n-\r\n-        # Get the top 10 services (change this number as needed)\r\n-        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717464234390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        # Sort the services by percentage contribution in descending order\r\n+        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n+\r\n+        # Get the top 10 services (change this number as needed)\r\n+        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})    \r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717464410000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,187 +115,32 @@\n         conn = get_db_connection()\r\n         cursor = conn.cursor()\r\n         # Query to get the total revenue per service for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            SELECT TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n             FROM rmit.FactTransaction_sub\r\n-            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n             GROUP BY TransactionTypeName\r\n+            ORDER BY TotalRevenue DESC\r\n+            LIMIT 10\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n \r\n         # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n \r\n         # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n+        for row in top_services:\r\n             row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n \r\n-        # Sort the services by percentage contribution in descending order\r\n-        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n-\r\n-        # Get the top 10 services (change this number as needed)\r\n-        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n-\r\n         conn.close()\r\n         return jsonify(top_services)\r\n \r\n     except Exception as e:\r\n-        return jsonify({'error': str(e)})    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT \r\n-                TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n         return jsonify({'error': str(e)})\r\n \r\n \r\n \r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n \r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n \r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE strftime('%Y', TransactionDate) IN ('2023', '2024')\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        # Sort the services by percentage contribution in descending order\r\n-        revenue_per_service.sort(key=lambda x: x['PercentageContribution'], reverse=True)\r\n-\r\n-        # Get the top 10 services (change this number as needed)\r\n-        top_services = revenue_per_service[:10]  # Change 10 to 5 for top 5\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})    \r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717464419361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+            ORDER BY TotalRevenue DESC\r\n+            LIMIT 10\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717464973903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TOP 10\r\n+    TransactionTypeName,\r\n+    COUNT(*) as ServiceCount,\r\n+    SUM(TransactionDisplayAmt) as TotalRevenue \r\n+FROM \r\n+    rmit.FactTransaction_sub\r\n+WHERE \r\n+    YEAR(TransactionDate) IN (2023, 2024)\r\n+GROUP BY \r\n+    TransactionTypeName\r\n+ORDER BY \r\n+    TotalRevenue DESC;\r\n+\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717464979706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,10 +115,9 @@\n         conn = get_db_connection()\r\n         cursor = conn.cursor()\r\n         # Query to get the total revenue per service for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n-            SELECT TOP 10\r\n-    TransactionTypeName,\r\n+            SELECT TOP 10 TransactionTypeName,\r\n     COUNT(*) as ServiceCount,\r\n     SUM(TransactionDisplayAmt) as TotalRevenue \r\n FROM \r\n     rmit.FactTransaction_sub\r\n@@ -150,296 +149,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-            ORDER BY TotalRevenue DESC\r\n-            LIMIT 10\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        top_services = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in top_services:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-            ORDER BY TotalRevenue DESC\r\n-            LIMIT 10\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        top_services = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in top_services:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717464988047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,11 +115,9 @@\n         conn = get_db_connection()\r\n         cursor = conn.cursor()\r\n         # Query to get the total revenue per service for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n-            SELECT TOP 10 TransactionTypeName,\r\n-    COUNT(*) as ServiceCount,\r\n-    SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n FROM \r\n     rmit.FactTransaction_sub\r\n WHERE \r\n     YEAR(TransactionDate) IN (2023, 2024)\r\n"
                },
                {
                    "date": 1717464993178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,10 +116,9 @@\n         cursor = conn.cursor()\r\n         # Query to get the total revenue per service for 2023 and 2024\r\n         cursor.execute(\"\"\"\r\n             SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-FROM \r\n-    rmit.FactTransaction_sub\r\n+            FROM rmit.FactTransaction_sub\r\n WHERE \r\n     YEAR(TransactionDate) IN (2023, 2024)\r\n GROUP BY \r\n     TransactionTypeName\r\n"
                },
                {
                    "date": 1717464999839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+    \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY \r\n+                TransactionTypeName\r\n+            ORDER BY \r\n+                TotalRevenue DESC;\r\n+\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717465006212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,165 +118,14 @@\n         cursor.execute(\"\"\"\r\n             SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n             FROM rmit.FactTransaction_sub\r\n             WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY \r\n-                TransactionTypeName\r\n-            ORDER BY \r\n-                TotalRevenue DESC;\r\n-\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        top_services = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in top_services:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n             GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+            ORDER BY TotalRevenue DESC;\r\n \r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-WHERE \r\n-    YEAR(TransactionDate) IN (2023, 2024)\r\n-GROUP BY \r\n-    TransactionTypeName\r\n-ORDER BY \r\n-    TotalRevenue DESC;\r\n-\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n         top_services = [dict(zip(columns, row)) for row in rows]\r\n \r\n         # Calculate total revenue for 2023 and 2024\r\n         total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n"
                },
                {
                    "date": 1717465021872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,9 @@\n             SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n             FROM rmit.FactTransaction_sub\r\n             WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n             GROUP BY TransactionTypeName\r\n-            ORDER BY TotalRevenue DESC;\r\n-\r\n+            ORDER BY TotalRevenue DESC\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n         top_services = [dict(zip(columns, row)) for row in rows]\r\n"
                },
                {
                    "date": 1717465713548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueServiceWithoutConsultation', methods=['GET'])\r\n+def get_revenue_total_without_consultation():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024 excluding Consultation service\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            AND ServiceType != 'Consultation'\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+        \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+            ORDER BY TotalRevenue DESC;\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1717465732120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         cursor.execute(\"\"\"\r\n             SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n             FROM rmit.FactTransaction_sub\r\n             WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            AND ServiceType != 'Consultation'\r\n+            AND TransactionTypeName != 'Consultation'\r\n         \"\"\")\r\n         rows = cursor.fetchall()\r\n         columns = [column[0] for column in cursor.description]\r\n         revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n@@ -164,149 +164,4 @@\n \r\n \r\n \r\n \r\n-from flask import Blueprint, jsonify\r\n-from db_config import get_db_connection\r\n-\r\n-serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n-\r\n-\r\n-#Data Point 1    \r\n-@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n-def get_usage_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total count of transactions\r\n-        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n-\r\n-        # Calculate percentage usage\r\n-        for row in usage_per_service:\r\n-            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(usage_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-# Data Point 2\r\n-@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n-def get_transaction_counts():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n-            FROM rmit.FactTransaction_sub\r\n-            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n-            ORDER BY Month\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        result = [dict(zip(columns, row)) for row in rows]\r\n-        conn.close()\r\n-        return jsonify(result)\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-# Data point 2: text total     \r\n-@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n-def get_revenue_total():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-    \r\n-# Data Point 3\r\n-@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n-def get_revenue_percentage():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in revenue_per_service:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(revenue_per_service)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-    \r\n-\r\n-@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n-def get_top_services():\r\n-    try:\r\n-        conn = get_db_connection()\r\n-        cursor = conn.cursor()\r\n-        # Query to get the total revenue per service for 2023 and 2024\r\n-        cursor.execute(\"\"\"\r\n-            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n-            FROM rmit.FactTransaction_sub\r\n-            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n-            GROUP BY TransactionTypeName\r\n-            ORDER BY TotalRevenue DESC\r\n-        \"\"\")\r\n-        rows = cursor.fetchall()\r\n-        columns = [column[0] for column in cursor.description]\r\n-        top_services = [dict(zip(columns, row)) for row in rows]\r\n-\r\n-        # Calculate total revenue for 2023 and 2024\r\n-        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n-\r\n-        # Calculate percentage contribution\r\n-        for row in top_services:\r\n-            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n-\r\n-        conn.close()\r\n-        return jsonify(top_services)\r\n-\r\n-    except Exception as e:\r\n-        return jsonify({'error': str(e)})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1717465801387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueServiceWithoutConsultation', methods=['GET'])\r\n+def get_revenue_total_without_consultation():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024 excluding Consultation service\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            AND TransactionTypeName != 'Consultation'\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+        \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n+            GROUP BY TransactionTypeName\r\n+            ORDER BY TotalRevenue DESC;\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1718090976517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+from flask import Blueprint, jsonify\r\n+from db_config import get_db_connection\r\n+\r\n+serviceData_bp = Blueprint('serviceData_bp', __name__)\r\n+\r\n+\r\n+#Data Point 1    \r\n+@serviceData_bp.route('/serviceData/usedServicePercentage', methods=['GET'])\r\n+def get_usage_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, COUNT(*) AS UsageCount\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE ClinicID BETWEEN 3 AND 7\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        usage_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total count of transactions\r\n+        total_count = sum(row['UsageCount'] for row in usage_per_service)\r\n+\r\n+        # Calculate percentage usage\r\n+        for row in usage_per_service:\r\n+            row['PercentageUsage'] = (row['UsageCount'] / total_count) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(usage_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+# Data Point 2\r\n+@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\n+def get_transaction_counts():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE ClinicID BETWEEN 3 AND 7\r\n+            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n+            ORDER BY Month\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        result = [dict(zip(columns, row)) for row in rows]\r\n+        conn.close()\r\n+        return jsonify(result)\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+# Data point 2: text total     \r\n+@serviceData_bp.route('/serviceData/totalRevenueService', methods=['GET'])\r\n+def get_revenue_total():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE ClinicID BETWEEN 3 AND 7\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+@serviceData_bp.route('/serviceData/totalRevenueServiceWithoutConsultation', methods=['GET'])\r\n+def get_revenue_total_without_consultation():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024 excluding Consultation service\r\n+        cursor.execute(\"\"\"\r\n+            SELECT SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE TransactionTypeName != 'Consultation' \r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+        \r\n+# Data Point 3\r\n+@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\n+def get_revenue_percentage():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE ClinicID BETWEEN 3 AND 7\r\n+            GROUP BY TransactionTypeName\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in revenue_per_service:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(revenue_per_service)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+    \r\n+\r\n+@serviceData_bp.route('/serviceData/topServices', methods=['GET'])\r\n+def get_top_services():\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+        # Query to get the total revenue per service for 2023 and 2024\r\n+        cursor.execute(\"\"\"\r\n+            SELECT TOP 10 TransactionTypeName, COUNT(*) as ServiceCount, SUM(TransactionDisplayAmt) as TotalRevenue \r\n+            FROM rmit.FactTransaction_sub\r\n+            WHERE ClinicID BETWEEN 3 AND 7\r\n+            GROUP BY TransactionTypeName\r\n+            ORDER BY TotalRevenue DESC;\r\n+        \"\"\")\r\n+        rows = cursor.fetchall()\r\n+        columns = [column[0] for column in cursor.description]\r\n+        top_services = [dict(zip(columns, row)) for row in rows]\r\n+\r\n+        # Calculate total revenue for 2023 and 2024\r\n+        total_revenue = sum(row['TotalRevenue'] for row in top_services)\r\n+\r\n+        # Calculate percentage contribution\r\n+        for row in top_services:\r\n+            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n+\r\n+        conn.close()\r\n+        return jsonify(top_services)\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({'error': str(e)})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                }
            ],
            "date": 1716847099081,
            "name": "Commit-0",
            "content": "from flask import Blueprint, jsonify\r\nfrom db_config import get_db_connection\r\n\r\nserviceData_bp = Blueprint('serviceData_bp', __name__)\r\n\r\n\r\n# Data Point 2\r\n@serviceData_bp.route('/serviceData/transactionServiceCounts', methods=['GET'])\r\ndef get_transaction_counts():\r\n    try:\r\n        conn = get_db_connection()\r\n        cursor = conn.cursor()\r\n        cursor.execute(\"\"\"\r\n            SELECT TransactionTypeName, DATEPART(month, TransactionDate) as Month, COUNT(*) as Count\r\n            FROM rmit.FactTransaction_sub\r\n            GROUP BY TransactionTypeName, DATEPART(month, TransactionDate)\r\n            ORDER BY Month\r\n        \"\"\")\r\n        rows = cursor.fetchall()\r\n        columns = [column[0] for column in cursor.description]\r\n        result = [dict(zip(columns, row)) for row in rows]\r\n        conn.close()\r\n        return jsonify(result)\r\n    except Exception as e:\r\n        return jsonify({'error': str(e)})\r\n    \r\n# Data Point 3\r\n@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\ndef get_revenue_percentage():\r\n    try:\r\n        conn = get_db_connection()\r\n        cursor = conn.cursor()\r\n        # Query to get the total revenue per service for 2023 and 2024\r\n        cursor.execute(\"\"\"\r\n            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n            FROM rmit.FactTransaction_sub\r\n            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n            GROUP BY TransactionTypeName\r\n        \"\"\")\r\n        rows = cursor.fetchall()\r\n        columns = [column[0] for column in cursor.description]\r\n        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n\r\n        # Calculate total revenue for 2023 and 2024\r\n        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n\r\n        # Calculate percentage contribution\r\n        for row in revenue_per_service:\r\n            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n\r\n        conn.close()\r\n        return jsonify(revenue_per_service)\r\n\r\n    except Exception as e:\r\n        return jsonify({'error': str(e)})\r\n    \r\n# Data Point 3\r\n@serviceData_bp.route('/serviceData/revenueServicePercentage', methods=['GET'])\r\ndef get_revenue_percentage():\r\n    try:\r\n        conn = get_db_connection()\r\n        cursor = conn.cursor()\r\n        # Query to get the total revenue per service for 2023 and 2024\r\n        cursor.execute(\"\"\"\r\n            SELECT TransactionTypeName, SUM(TransactionDisplayAmt) as TotalRevenue \r\n            FROM rmit.FactTransaction_sub\r\n            WHERE YEAR(TransactionDate) IN (2023, 2024)\r\n            GROUP BY TransactionTypeName\r\n        \"\"\")\r\n        rows = cursor.fetchall()\r\n        columns = [column[0] for column in cursor.description]\r\n        revenue_per_service = [dict(zip(columns, row)) for row in rows]\r\n\r\n        # Calculate total revenue for 2023 and 2024\r\n        total_revenue = sum(row['TotalRevenue'] for row in revenue_per_service)\r\n\r\n        # Calculate percentage contribution\r\n        for row in revenue_per_service:\r\n            row['PercentageContribution'] = (row['TotalRevenue'] / total_revenue) * 100\r\n\r\n        conn.close()\r\n        return jsonify(revenue_per_service)\r\n\r\n    except Exception as e:\r\n        return jsonify({'error': str(e)})\r\n\r\n\r\n"
        }
    ]
}