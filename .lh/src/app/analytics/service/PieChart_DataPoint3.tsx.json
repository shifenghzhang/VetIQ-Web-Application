{
    "sourceFile": "src/app/analytics/service/PieChart_DataPoint3.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1717462465267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717462470709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n interface PieChartProps {\r\n   data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n }\r\n \r\n-const PieChart_Data: React.FC<PieChartProps> = ({ data }) => {\r\n+const PieChart_DataPoint: React.FC<PieChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n   const containerRef = useRef<HTMLDivElement | null>(null);\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1717462479320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n \r\n   return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n };\r\n \r\n-export default PieChart;\r\n+export default PieChart_DataPoint3;\r\n \r\n \r\n \r\n \r\n"
                }
            ],
            "date": 1717462465267,
            "name": "Commit-0",
            "content": "import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface PieChartProps {\r\n  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n}\r\n\r\nconst PieChart_Data: React.FC<PieChartProps> = ({ data }) => {\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const renderChart = () => {\r\n      if (!svgRef.current || !containerRef.current) return;\r\n\r\n      const containerWidth = containerRef.current.clientWidth;\r\n      const containerHeight = containerRef.current.clientHeight;\r\n\r\n      const width = containerWidth;\r\n      const height = containerHeight;\r\n      const radius = Math.min(width, height) / 2;\r\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n      d3.select(svgRef.current).selectAll('*').remove(); // Clear previous chart\r\n\r\n      const svg = d3.select(svgRef.current)\r\n        .attr('width', width)\r\n        .attr('height', height)\r\n        .append('g')\r\n        .attr('transform', `translate(${width / 2},${height / 2})`);\r\n\r\n      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n        .value(d => d.PercentageContribution)(data);\r\n\r\n      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n        .innerRadius(0)\r\n        .outerRadius(radius);\r\n\r\n      svg.selectAll('path')\r\n        .data(pie)\r\n        .enter().append('path')\r\n        .attr('d', arc)\r\n        .attr('fill', d => color(d.data.TransactionTypeName))\r\n        .attr('stroke', 'white')\r\n        .style('stroke-width', '2px');\r\n\r\n      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n        .innerRadius(radius * 0.7)\r\n        .outerRadius(radius * 0.7);\r\n\r\n      svg.selectAll('text')\r\n        .data(pie)\r\n        .enter().append('text')\r\n        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n        .attr('dy', '0.35em')\r\n        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n        .style('text-anchor', 'middle')\r\n        .style('font-size', '12px');\r\n    };\r\n\r\n    renderChart();\r\n\r\n    window.addEventListener('resize', renderChart);\r\n    return () => window.removeEventListener('resize', renderChart);\r\n  }, [data]);\r\n\r\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n};\r\n\r\nexport default PieChart;\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}