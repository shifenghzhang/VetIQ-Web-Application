{
    "sourceFile": "src/app/analytics/service/LoadData.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1717461558798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717462130946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useEffect, useState } from 'react';\r\n import axios from 'axios';\r\n-import BarChart from './BarChart';\r\n+import BarChart from './BarChart_DataPoint2';\r\n import PieChart from './PieChart';\r\n import PieChartData1 from './PieChartData1';\r\n \r\n \r\n"
                },
                {
                    "date": 1717462174364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   TotalRevenue: number;\r\n   PercentageContribution: number;\r\n }\r\n \r\n-const LoadBarChart_ = () => {\r\n+const LoadBarChart_d = () => {\r\n   const [transactionData, setData] = useState<ServiceTransaction[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n \r\n"
                },
                {
                    "date": 1717462182057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import BarChart from './BarChart_DataPoint2';\r\n+import PieChart from './PieChart';\r\n+import PieChartData1 from './PieChartData1';\r\n+\r\n+\r\n+interface ServiceTransaction {\r\n+  TransactionTypeName: string;\r\n+  Month: number;\r\n+  Count: number;\r\n+}\r\n+\r\n+interface RevenuePercentage {\r\n+  TransactionTypeName: string;\r\n+  TotalRevenue: number;\r\n+  PercentageContribution: number;\r\n+}\r\n+\r\n+const LoadBarChart_DataPoint2 = () => {\r\n+  const [transactionData, setData] = useState<ServiceTransaction[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      try {\r\n+        const response = await axios.get<ServiceTransaction[]>('http://127.0.0.1:5000/api/serviceData/transactionServiceCounts');\r\n+        const transformedData = response.data.map(item => ({\r\n+          TransactionTypeName: item.TransactionTypeName,\r\n+          Month: item.Month,\r\n+          Count: item.Count\r\n+        }));\r\n+        setData(transformedData);\r\n+        setLoading(false);\r\n+      } catch (error) {\r\n+        if (axios.isAxiosError(error)) {\r\n+          setError(error.message);\r\n+        } else if (error instanceof Error) {\r\n+          setError(error.message);\r\n+        } else {\r\n+          setError('An unknown error occurred');\r\n+        }\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  if (loading) {\r\n+    return <p>Loading...</p>;\r\n+  }\r\n+\r\n+  if (error) {\r\n+    return <p>Error: {error}</p>;\r\n+  }\r\n+\r\n+  return <BarChart data={transactionData} />;\r\n+};\r\n+\r\n+const LoadPieChart = () => {\r\n+  const [revenueData, setRevenueData] = useState<RevenuePercentage[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      try {\r\n+        const response = await axios.get<RevenuePercentage[]>('http://127.0.0.1:5000/api/serviceData/revenueServicePercentage');\r\n+        const transformedRevenueData = response.data.map(item => ({\r\n+          TransactionTypeName: item.TransactionTypeName,\r\n+          TotalRevenue: item.TotalRevenue,\r\n+          PercentageContribution: item.PercentageContribution\r\n+        }));\r\n+        setRevenueData(transformedRevenueData);\r\n+        setLoading(false);\r\n+      } catch (err) {\r\n+        if (axios.isAxiosError(err)) {\r\n+          setError(err.message);\r\n+        } else {\r\n+          setError('An unknown error occurred');\r\n+        }\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  if (loading) {\r\n+    return <p>Loading...</p>;\r\n+  }\r\n+\r\n+  if (error) {\r\n+    return <p>Error: {error}</p>;\r\n+  }\r\n+\r\n+  return <PieChart data={revenueData} />;\r\n+};\r\n+\r\n+interface ServiceRevenue {\r\n+  TransactionTypeName: string;\r\n+  TotalRevenue: number;\r\n+}\r\n+\r\n+const LoadServiceRevenue = () => {\r\n+  const [revenueData, setRevenueData] = useState<ServiceRevenue[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      try {\r\n+        const response = await axios.get<ServiceRevenue[]>('http://127.0.0.1:5000/api/serviceData/totalRevenueService');\r\n+        setRevenueData(response.data);\r\n+        setLoading(false);\r\n+      } catch (err) {\r\n+        if (axios.isAxiosError(err)) {\r\n+          setError(err.message);\r\n+        } else {\r\n+          setError('An unknown error occurred');\r\n+        }\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  if (loading) {\r\n+    return <p>Loading...</p>;\r\n+  }\r\n+\r\n+  if (error) {\r\n+    return <p>Error: {error}</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div>\r\n+      <h2>Revenue From Services</h2>\r\n+      <ul>\r\n+        {revenueData.map((service, index) => (\r\n+          <li key={index}>\r\n+            {service.TotalRevenue}\r\n+          </li>\r\n+        ))}\r\n+      </ul>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n+interface UsagePercentage {\r\n+  TransactionTypeName: string;\r\n+  PercentageUsage: number;\r\n+  TotalUsage: number;\r\n+}\r\n+\r\n+const LoadPieChartData1 = () => {\r\n+  const [usageData, setUsageData] = useState<UsagePercentage[]>([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      try {\r\n+        const response = await axios.get<UsagePercentage[]>('http://127.0.0.1:5000/api/serviceData/usedServicePercentage');\r\n+        const transformedUsageData = response.data.map(item => ({\r\n+          TransactionTypeName: item.TransactionTypeName,\r\n+          PercentageUsage: item.PercentageUsage,\r\n+          TotalUsage: item.TotalUsage\r\n+        }));\r\n+        setUsageData(transformedUsageData);\r\n+        setLoading(false);\r\n+      } catch (err) {\r\n+        if (axios.isAxiosError(err)) {\r\n+          setError(err.message);\r\n+        } else {\r\n+          setError('An unknown error occurred');\r\n+        }\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  if (loading) {\r\n+    return <p>Loading...</p>;\r\n+  }\r\n+\r\n+  if (error) {\r\n+    return <p>Error: {error}</p>;\r\n+  }\r\n+\r\n+  return <PieChartData1 data={usageData} />;\r\n+};\r\n+\r\n+export { LoadBarChart, LoadPieChart, LoadPieChartData1, LoadServiceRevenue };\r\n+\r\n+\r\n"
                }
            ],
            "date": 1717461558798,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport BarChart from './BarChart';\r\nimport PieChart from './PieChart';\r\nimport PieChartData1 from './PieChartData1';\r\n\r\n\r\ninterface ServiceTransaction {\r\n  TransactionTypeName: string;\r\n  Month: number;\r\n  Count: number;\r\n}\r\n\r\ninterface RevenuePercentage {\r\n  TransactionTypeName: string;\r\n  TotalRevenue: number;\r\n  PercentageContribution: number;\r\n}\r\n\r\nconst LoadBarChart = () => {\r\n  const [transactionData, setData] = useState<ServiceTransaction[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get<ServiceTransaction[]>('http://127.0.0.1:5000/api/serviceData/transactionServiceCounts');\r\n        const transformedData = response.data.map(item => ({\r\n          TransactionTypeName: item.TransactionTypeName,\r\n          Month: item.Month,\r\n          Count: item.Count\r\n        }));\r\n        setData(transformedData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n          setError(error.message);\r\n        } else if (error instanceof Error) {\r\n          setError(error.message);\r\n        } else {\r\n          setError('An unknown error occurred');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return <BarChart data={transactionData} />;\r\n};\r\n\r\nconst LoadPieChart = () => {\r\n  const [revenueData, setRevenueData] = useState<RevenuePercentage[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get<RevenuePercentage[]>('http://127.0.0.1:5000/api/serviceData/revenueServicePercentage');\r\n        const transformedRevenueData = response.data.map(item => ({\r\n          TransactionTypeName: item.TransactionTypeName,\r\n          TotalRevenue: item.TotalRevenue,\r\n          PercentageContribution: item.PercentageContribution\r\n        }));\r\n        setRevenueData(transformedRevenueData);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        if (axios.isAxiosError(err)) {\r\n          setError(err.message);\r\n        } else {\r\n          setError('An unknown error occurred');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return <PieChart data={revenueData} />;\r\n};\r\n\r\ninterface ServiceRevenue {\r\n  TransactionTypeName: string;\r\n  TotalRevenue: number;\r\n}\r\n\r\nconst LoadServiceRevenue = () => {\r\n  const [revenueData, setRevenueData] = useState<ServiceRevenue[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get<ServiceRevenue[]>('http://127.0.0.1:5000/api/serviceData/totalRevenueService');\r\n        setRevenueData(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        if (axios.isAxiosError(err)) {\r\n          setError(err.message);\r\n        } else {\r\n          setError('An unknown error occurred');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Revenue From Services</h2>\r\n      <ul>\r\n        {revenueData.map((service, index) => (\r\n          <li key={index}>\r\n            {service.TotalRevenue}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\ninterface UsagePercentage {\r\n  TransactionTypeName: string;\r\n  PercentageUsage: number;\r\n  TotalUsage: number;\r\n}\r\n\r\nconst LoadPieChartData1 = () => {\r\n  const [usageData, setUsageData] = useState<UsagePercentage[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get<UsagePercentage[]>('http://127.0.0.1:5000/api/serviceData/usedServicePercentage');\r\n        const transformedUsageData = response.data.map(item => ({\r\n          TransactionTypeName: item.TransactionTypeName,\r\n          PercentageUsage: item.PercentageUsage,\r\n          TotalUsage: item.TotalUsage\r\n        }));\r\n        setUsageData(transformedUsageData);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        if (axios.isAxiosError(err)) {\r\n          setError(err.message);\r\n        } else {\r\n          setError('An unknown error occurred');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return <PieChartData1 data={usageData} />;\r\n};\r\n\r\nexport { LoadBarChart, LoadPieChart, LoadPieChartData1, LoadServiceRevenue };\r\n\r\n\r\n"
        }
    ]
}