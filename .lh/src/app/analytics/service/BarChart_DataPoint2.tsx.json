{
    "sourceFile": "src/app/analytics/service/BarChart_DataPoint2.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1717462334541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717462341130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n interface BarChartProps {\r\n   data: { TransactionTypeName: string; Month: number; Count: number }[];\r\n }\r\n \r\n-const BarChart_: React.FC<BarChartProps> = ({ data }) => {\r\n+const BarChart_Data: React.FC<BarChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n   const containerRef = useRef<HTMLDivElement | null>(null);\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1717462350876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n interface BarChartProps {\r\n   data: { TransactionTypeName: string; Month: number; Count: number }[];\r\n }\r\n \r\n-const BarChart_Data: React.FC<BarChartProps> = ({ data }) => {\r\n+const BarChart_DataPoint2: React.FC<BarChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n   const containerRef = useRef<HTMLDivElement | null>(null);\r\n \r\n   useEffect(() => {\r\n@@ -64,6 +64,6 @@\n \r\n   return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n };\r\n \r\n-export default BarChart;\r\n+export default BarChart_DataPoint2;\r\n \r\n"
                }
            ],
            "date": 1717462334541,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface BarChartProps {\r\n  data: { TransactionTypeName: string; Month: number; Count: number }[];\r\n}\r\n\r\nconst BarChart_: React.FC<BarChartProps> = ({ data }) => {\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const renderChart = () => {\r\n      if (!svgRef.current || !containerRef.current) return;\r\n\r\n      const containerWidth = containerRef.current.clientWidth;\r\n      const containerHeight = containerRef.current.clientHeight;\r\n\r\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\r\n      const width = containerWidth - margin.left - margin.right;\r\n      const height = containerHeight - margin.top - margin.bottom;\r\n\r\n      d3.select(svgRef.current).selectAll('*').remove(); // Clear previous chart\r\n\r\n      const svg = d3.select(svgRef.current)\r\n        .attr('width', containerWidth)\r\n        .attr('height', containerHeight)\r\n        .append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n      const x = d3.scaleBand()\r\n        .domain(data.map(d => d.TransactionTypeName))\r\n        .range([0, width])\r\n        .padding(0.1);\r\n\r\n      const y = d3.scaleLinear()\r\n        .domain([0, d3.max(data, d => d.Count)!])\r\n        .nice()\r\n        .range([height, 0]);\r\n\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x));\r\n\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y));\r\n\r\n      svg.selectAll('.bar')\r\n        .data(data)\r\n        .enter().append('rect')\r\n        .attr('class', 'bar')\r\n        .attr('x', d => x(d.TransactionTypeName)!)\r\n        .attr('y', d => y(d.Count))\r\n        .attr('width', x.bandwidth())\r\n        .attr('height', d => height - y(d.Count))\r\n        .attr('fill', 'steelblue');\r\n    };\r\n\r\n    renderChart();\r\n\r\n    window.addEventListener('resize', renderChart);\r\n    return () => window.removeEventListener('resize', renderChart);\r\n  }, [data]);\r\n\r\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n};\r\n\r\nexport default BarChart;\r\n\r\n"
        }
    ]
}