{
    "sourceFile": "src/app/analytics/client/PieChart.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1716846406308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716846634874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,58 +9,60 @@\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n   const containerRef = useRef<HTMLDivElement | null>(null);\r\n \r\n   useEffect(() => {\r\n-    if (!svgRef.current || !containerRef.current) return;\r\n+    const renderChart = () => {\r\n+      if (!svgRef.current || !containerRef.current) return;\r\n \r\n-    const containerWidth = containerRef.current.clientWidth;\r\n-    const containerHeight = containerRef.current.clientHeight;\r\n+      const containerWidth = containerRef.current.clientWidth;\r\n+      const containerHeight = containerRef.current.clientHeight;\r\n \r\n-    const width = containerWidth;\r\n-    const height = containerHeight;\r\n-    const radius = Math.min(width, height) / 2;\r\n-    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n+      const width = containerWidth;\r\n+      const height = containerHeight;\r\n+      const radius = Math.min(width, height) / 2;\r\n+      const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n \r\n-    const svg = d3.select(svgRef.current)\r\n-      .attr('width', width)\r\n-      .attr('height', height)\r\n-      .attr('viewBox', `0 0 ${width} ${height}`)\r\n-      .attr('preserveAspectRatio', 'xMidYMid meet')\r\n-      .append('g')\r\n-      .attr('transform', `translate(${width / 2},${height / 2})`);\r\n+      d3.select(svgRef.current).selectAll('*').remove(); // Clear previous chart\r\n \r\n-    const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n-      .value(d => d.PercentageContribution)(data);\r\n+      const svg = d3.select(svgRef.current)\r\n+        .attr('width', width)\r\n+        .attr('height', height)\r\n+        .append('g')\r\n+        .attr('transform', `translate(${width / 2},${height / 2})`);\r\n \r\n-    const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-      .innerRadius(0)\r\n-      .outerRadius(radius);\r\n+      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n+        .value(d => d.PercentageContribution)(data);\r\n \r\n-    svg.selectAll('path')\r\n-      .data(pie)\r\n-      .enter().append('path')\r\n-      .attr('d', arc)\r\n-      .attr('fill', d => color(d.data.TransactionTypeName))\r\n-      .attr('stroke', 'white')\r\n-      .style('stroke-width', '2px');\r\n+      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(0)\r\n+        .outerRadius(radius);\r\n \r\n-    // Adding labels\r\n-    const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-      .innerRadius(radius * 0.7)\r\n-      .outerRadius(radius * 0.7);\r\n+      svg.selectAll('path')\r\n+        .data(pie)\r\n+        .enter().append('path')\r\n+        .attr('d', arc)\r\n+        .attr('fill', d => color(d.data.TransactionTypeName))\r\n+        .attr('stroke', 'white')\r\n+        .style('stroke-width', '2px');\r\n \r\n-    svg.selectAll('text')\r\n-      .data(pie)\r\n-      .enter().append('text')\r\n-      .attr('transform', d => `translate(${label.centroid(d)})`)\r\n-      .attr('dy', '0.35em')\r\n-      .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n-      .style('text-anchor', 'middle')\r\n-      .style('font-size', '12px');\r\n+      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(radius * 0.7)\r\n+        .outerRadius(radius * 0.7);\r\n \r\n-    return () => {\r\n-      d3.select(svgRef.current).selectAll('*').remove(); // Clean up on unmount\r\n+      svg.selectAll('text')\r\n+        .data(pie)\r\n+        .enter().append('text')\r\n+        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n+        .attr('dy', '0.35em')\r\n+        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n+        .style('text-anchor', 'middle')\r\n+        .style('font-size', '12px');\r\n     };\r\n+\r\n+    renderChart();\r\n+\r\n+    window.addEventListener('resize', renderChart);\r\n+    return () => window.removeEventListener('resize', renderChart);\r\n   }, [data]);\r\n \r\n   return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n };\r\n@@ -68,4 +70,5 @@\n export default PieChart;\r\n \r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1716846822530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+import React, { useRef, useEffect } from 'react';\r\n+import * as d3 from 'd3';\r\n+\r\n+interface PieChartProps {\r\n+  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n+}\r\n+\r\n+const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n+  const svgRef = useRef<SVGSVGElement | null>(null);\r\n+  const containerRef = useRef<HTMLDivElement | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const renderChart = () => {\r\n+      if (!svgRef.current || !containerRef.current) return;\r\n+\r\n+      const containerWidth = containerRef.current.clientWidth;\r\n+      const containerHeight = containerRef.current.clientHeight;\r\n+\r\n+      const width = containerWidth;\r\n+      const height = containerHeight;\r\n+      const radius = Math.min(width, height) / 2;\r\n+      const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n+\r\n+      d3.select(svgRef.current).selectAll('*').remove(); // Clear previous chart\r\n+\r\n+      const svg = d3.select(svgRef.current)\r\n+        .attr('width', width)\r\n+        .attr('height', height)\r\n+        .append('g')\r\n+        .attr('transform', `translate(${width / 2},${height / 2})`);\r\n+\r\n+      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n+        .value(d => d.PercentageContribution)(data);\r\n+\r\n+      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(0)\r\n+        .outerRadius(radius);\r\n+\r\n+      svg.selectAll('path')\r\n+        .data(pie)\r\n+        .enter().append('path')\r\n+        .attr('d', arc)\r\n+        .attr('fill', d => color(d.data.TransactionTypeName))\r\n+        .attr('stroke', 'white')\r\n+        .style('stroke-width', '2px');\r\n+\r\n+      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(radius * 0.7)\r\n+        .outerRadius(radius * 0.7);\r\n+\r\n+      svg.selectAll('text')\r\n+        .data(pie)\r\n+        .enter().append('text')\r\n+        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n+        .attr('dy', '0.35em')\r\n+        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n+        .style('text-anchor', 'middle')\r\n+        .style('font-size', '12px');\r\n+    };\r\n+\r\n+    renderChart();\r\n+\r\n+    window.addEventListener('resize', renderChart);\r\n+    return () => window.removeEventListener('resize', renderChart);\r\n+  }, [data]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n+};\r\n+\r\n+export default PieChart;\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1716848031237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,16 @@\n import React, { useRef, useEffect } from 'react';\r\n import * as d3 from 'd3';\r\n \r\n interface PieChartProps {\r\n-  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n+  data: {\r\n+    chartName: string;\r\n+    slices: {\r\n+      TransactionTypeName: string;\r\n+      TotalRevenue: number;\r\n+      PercentageContribution: number;\r\n+    }[];\r\n+  }[];\r\n }\r\n \r\n const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n@@ -28,35 +35,49 @@\n         .attr('height', height)\r\n         .append('g')\r\n         .attr('transform', `translate(${width / 2},${height / 2})`);\r\n \r\n-      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n-        .value(d => d.PercentageContribution)(data);\r\n+      data.forEach((chartData, i) => {\r\n+        const pie = d3.pie<{\r\n+          TransactionTypeName: string;\r\n+          TotalRevenue: number;\r\n+          PercentageContribution: number;\r\n+        }>()\r\n+          .value(d => d.PercentageContribution)(chartData.slices);\r\n \r\n-      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-        .innerRadius(0)\r\n-        .outerRadius(radius);\r\n+        const arc = d3.arc<d3.PieArcDatum<{\r\n+          TransactionTypeName: string;\r\n+          TotalRevenue: number;\r\n+          PercentageContribution: number;\r\n+        }>>()\r\n+          .innerRadius(radius * (0.2 + i * 0.1)) // Adjust inner radius for each chart\r\n+          .outerRadius(radius * (0.3 + i * 0.1)); // Adjust outer radius for each chart\r\n \r\n-      svg.selectAll('path')\r\n-        .data(pie)\r\n-        .enter().append('path')\r\n-        .attr('d', arc)\r\n-        .attr('fill', d => color(d.data.TransactionTypeName))\r\n-        .attr('stroke', 'white')\r\n-        .style('stroke-width', '2px');\r\n+        svg.selectAll('path')\r\n+          .data(pie)\r\n+          .enter().append('path')\r\n+          .attr('d', arc)\r\n+          .attr('fill', (d, j) => color(`${chartData.chartName}_${j}`)) // Unique color for each slice\r\n+          .attr('stroke', 'white')\r\n+          .style('stroke-width', '2px');\r\n \r\n-      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-        .innerRadius(radius * 0.7)\r\n-        .outerRadius(radius * 0.7);\r\n+        const label = d3.arc<d3.PieArcDatum<{\r\n+          TransactionTypeName: string;\r\n+          TotalRevenue: number;\r\n+          PercentageContribution: number;\r\n+        }>>()\r\n+          .innerRadius(radius * (0.5 + i * 0.1)) // Adjust inner radius for each label\r\n+          .outerRadius(radius * (0.5 + i * 0.1)); // Adjust outer radius for each label\r\n \r\n-      svg.selectAll('text')\r\n-        .data(pie)\r\n-        .enter().append('text')\r\n-        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n-        .attr('dy', '0.35em')\r\n-        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n-        .style('text-anchor', 'middle')\r\n-        .style('font-size', '12px');\r\n+        svg.selectAll('text')\r\n+          .data(pie)\r\n+          .enter().append('text')\r\n+          .attr('transform', d => `translate(${label.centroid(d)})`)\r\n+          .attr('dy', '0.35em')\r\n+          .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n+          .style('text-anchor', 'middle')\r\n+          .style('font-size', '12px');\r\n+      });\r\n     };\r\n \r\n     renderChart();\r\n \r\n@@ -72,78 +93,5 @@\n \r\n \r\n \r\n \r\n-import React, { useRef, useEffect } from 'react';\r\n-import * as d3 from 'd3';\r\n \r\n-interface PieChartProps {\r\n-  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n-}\r\n-\r\n-const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n-  const svgRef = useRef<SVGSVGElement | null>(null);\r\n-  const containerRef = useRef<HTMLDivElement | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const renderChart = () => {\r\n-      if (!svgRef.current || !containerRef.current) return;\r\n-\r\n-      const containerWidth = containerRef.current.clientWidth;\r\n-      const containerHeight = containerRef.current.clientHeight;\r\n-\r\n-      const width = containerWidth;\r\n-      const height = containerHeight;\r\n-      const radius = Math.min(width, height) / 2;\r\n-      const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n-\r\n-      d3.select(svgRef.current).selectAll('*').remove(); // Clear previous chart\r\n-\r\n-      const svg = d3.select(svgRef.current)\r\n-        .attr('width', width)\r\n-        .attr('height', height)\r\n-        .append('g')\r\n-        .attr('transform', `translate(${width / 2},${height / 2})`);\r\n-\r\n-      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n-        .value(d => d.PercentageContribution)(data);\r\n-\r\n-      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-        .innerRadius(0)\r\n-        .outerRadius(radius);\r\n-\r\n-      svg.selectAll('path')\r\n-        .data(pie)\r\n-        .enter().append('path')\r\n-        .attr('d', arc)\r\n-        .attr('fill', d => color(d.data.TransactionTypeName))\r\n-        .attr('stroke', 'white')\r\n-        .style('stroke-width', '2px');\r\n-\r\n-      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n-        .innerRadius(radius * 0.7)\r\n-        .outerRadius(radius * 0.7);\r\n-\r\n-      svg.selectAll('text')\r\n-        .data(pie)\r\n-        .enter().append('text')\r\n-        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n-        .attr('dy', '0.35em')\r\n-        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n-        .style('text-anchor', 'middle')\r\n-        .style('font-size', '12px');\r\n-    };\r\n-\r\n-    renderChart();\r\n-\r\n-    window.addEventListener('resize', renderChart);\r\n-    return () => window.removeEventListener('resize', renderChart);\r\n-  }, [data]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n-};\r\n-\r\n-export default PieChart;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1716848051203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,9 @@\n import React, { useRef, useEffect } from 'react';\r\n import * as d3 from 'd3';\r\n \r\n interface PieChartProps {\r\n-  data: {\r\n-    chartName: string;\r\n-    slices: {\r\n-      TransactionTypeName: string;\r\n-      TotalRevenue: number;\r\n-      PercentageContribution: number;\r\n-    }[];\r\n-  }[];\r\n+  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n }\r\n \r\n const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n@@ -35,49 +28,35 @@\n         .attr('height', height)\r\n         .append('g')\r\n         .attr('transform', `translate(${width / 2},${height / 2})`);\r\n \r\n-      data.forEach((chartData, i) => {\r\n-        const pie = d3.pie<{\r\n-          TransactionTypeName: string;\r\n-          TotalRevenue: number;\r\n-          PercentageContribution: number;\r\n-        }>()\r\n-          .value(d => d.PercentageContribution)(chartData.slices);\r\n+      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n+        .value(d => d.PercentageContribution)(data);\r\n \r\n-        const arc = d3.arc<d3.PieArcDatum<{\r\n-          TransactionTypeName: string;\r\n-          TotalRevenue: number;\r\n-          PercentageContribution: number;\r\n-        }>>()\r\n-          .innerRadius(radius * (0.2 + i * 0.1)) // Adjust inner radius for each chart\r\n-          .outerRadius(radius * (0.3 + i * 0.1)); // Adjust outer radius for each chart\r\n+      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(0)\r\n+        .outerRadius(radius);\r\n \r\n-        svg.selectAll('path')\r\n-          .data(pie)\r\n-          .enter().append('path')\r\n-          .attr('d', arc)\r\n-          .attr('fill', (d, j) => color(`${chartData.chartName}_${j}`)) // Unique color for each slice\r\n-          .attr('stroke', 'white')\r\n-          .style('stroke-width', '2px');\r\n+      svg.selectAll('path')\r\n+        .data(pie)\r\n+        .enter().append('path')\r\n+        .attr('d', arc)\r\n+        .attr('fill', d => color(d.data.TransactionTypeName))\r\n+        .attr('stroke', 'white')\r\n+        .style('stroke-width', '2px');\r\n \r\n-        const label = d3.arc<d3.PieArcDatum<{\r\n-          TransactionTypeName: string;\r\n-          TotalRevenue: number;\r\n-          PercentageContribution: number;\r\n-        }>>()\r\n-          .innerRadius(radius * (0.5 + i * 0.1)) // Adjust inner radius for each label\r\n-          .outerRadius(radius * (0.5 + i * 0.1)); // Adjust outer radius for each label\r\n+      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+        .innerRadius(radius * 0.7)\r\n+        .outerRadius(radius * 0.7);\r\n \r\n-        svg.selectAll('text')\r\n-          .data(pie)\r\n-          .enter().append('text')\r\n-          .attr('transform', d => `translate(${label.centroid(d)})`)\r\n-          .attr('dy', '0.35em')\r\n-          .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n-          .style('text-anchor', 'middle')\r\n-          .style('font-size', '12px');\r\n-      });\r\n+      svg.selectAll('text')\r\n+        .data(pie)\r\n+        .enter().append('text')\r\n+        .attr('transform', d => `translate(${label.centroid(d)})`)\r\n+        .attr('dy', '0.35em')\r\n+        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n+        .style('text-anchor', 'middle')\r\n+        .style('font-size', '12px');\r\n     };\r\n \r\n     renderChart();\r\n \r\n@@ -93,5 +72,4 @@\n \r\n \r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1716849629003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useRef, useEffect } from 'react';\r\n import * as d3 from 'd3';\r\n \r\n interface PieChartProps {\r\n-  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n+  data: { TransactionTypeName: string; PercentageUsage: number }[];\r\n }\r\n \r\n const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n@@ -28,33 +28,33 @@\n         .attr('height', height)\r\n         .append('g')\r\n         .attr('transform', `translate(${width / 2},${height / 2})`);\r\n \r\n-      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n-        .value(d => d.PercentageContribution)(data);\r\n+      const pie = d3.pie<{ TransactionTypeName: string; PercentageUsage: number }>()\r\n+        .value(d => d.PercentageUsage)(data);\r\n \r\n-      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; PercentageUsage: number }>>()\r\n         .innerRadius(0)\r\n         .outerRadius(radius);\r\n \r\n       svg.selectAll('path')\r\n         .data(pie)\r\n         .enter().append('path')\r\n         .attr('d', arc)\r\n-        .attr('fill', d => color(d.data.TransactionTypeName))\r\n+        .attr('fill', (d, i) => color(i.toString())) // Assign colors based on index\r\n         .attr('stroke', 'white')\r\n         .style('stroke-width', '2px');\r\n \r\n-      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n+      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; PercentageUsage: number }>>()\r\n         .innerRadius(radius * 0.7)\r\n         .outerRadius(radius * 0.7);\r\n \r\n       svg.selectAll('text')\r\n         .data(pie)\r\n         .enter().append('text')\r\n         .attr('transform', d => `translate(${label.centroid(d)})`)\r\n         .attr('dy', '0.35em')\r\n-        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n+        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageUsage.toFixed(2)}%)`)\r\n         .style('text-anchor', 'middle')\r\n         .style('font-size', '12px');\r\n     };\r\n \r\n@@ -72,4 +72,5 @@\n \r\n \r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1716850392928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useRef, useEffect } from 'react';\r\n import * as d3 from 'd3';\r\n \r\n interface PieChartProps {\r\n-  data: { TransactionTypeName: string; PercentageUsage: number }[];\r\n+  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n }\r\n \r\n const PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n   const svgRef = useRef<SVGSVGElement | null>(null);\r\n@@ -28,33 +28,33 @@\n         .attr('height', height)\r\n         .append('g')\r\n         .attr('transform', `translate(${width / 2},${height / 2})`);\r\n \r\n-      const pie = d3.pie<{ TransactionTypeName: string; PercentageUsage: number }>()\r\n-        .value(d => d.PercentageUsage)(data);\r\n+      const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n+        .value(d => d.PercentageContribution)(data);\r\n \r\n-      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; PercentageUsage: number }>>()\r\n+      const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n         .innerRadius(0)\r\n         .outerRadius(radius);\r\n \r\n       svg.selectAll('path')\r\n         .data(pie)\r\n         .enter().append('path')\r\n         .attr('d', arc)\r\n-        .attr('fill', (d, i) => color(i.toString())) // Assign colors based on index\r\n+        .attr('fill', d => color(d.data.TransactionTypeName))\r\n         .attr('stroke', 'white')\r\n         .style('stroke-width', '2px');\r\n \r\n-      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; PercentageUsage: number }>>()\r\n+      const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n         .innerRadius(radius * 0.7)\r\n         .outerRadius(radius * 0.7);\r\n \r\n       svg.selectAll('text')\r\n         .data(pie)\r\n         .enter().append('text')\r\n         .attr('transform', d => `translate(${label.centroid(d)})`)\r\n         .attr('dy', '0.35em')\r\n-        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageUsage.toFixed(2)}%)`)\r\n+        .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n         .style('text-anchor', 'middle')\r\n         .style('font-size', '12px');\r\n     };\r\n \r\n@@ -72,5 +72,4 @@\n \r\n \r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1716850398021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,4 @@\n \r\n \r\n \r\n \r\n-\r\n"
                }
            ],
            "date": 1716846406308,
            "name": "Commit-0",
            "content": "import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface PieChartProps {\r\n  data: { TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }[];\r\n}\r\n\r\nconst PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current || !containerRef.current) return;\r\n\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = containerRef.current.clientHeight;\r\n\r\n    const width = containerWidth;\r\n    const height = containerHeight;\r\n    const radius = Math.min(width, height) / 2;\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .attr('viewBox', `0 0 ${width} ${height}`)\r\n      .attr('preserveAspectRatio', 'xMidYMid meet')\r\n      .append('g')\r\n      .attr('transform', `translate(${width / 2},${height / 2})`);\r\n\r\n    const pie = d3.pie<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>()\r\n      .value(d => d.PercentageContribution)(data);\r\n\r\n    const arc = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n      .innerRadius(0)\r\n      .outerRadius(radius);\r\n\r\n    svg.selectAll('path')\r\n      .data(pie)\r\n      .enter().append('path')\r\n      .attr('d', arc)\r\n      .attr('fill', d => color(d.data.TransactionTypeName))\r\n      .attr('stroke', 'white')\r\n      .style('stroke-width', '2px');\r\n\r\n    // Adding labels\r\n    const label = d3.arc<d3.PieArcDatum<{ TransactionTypeName: string; TotalRevenue: number; PercentageContribution: number }>>()\r\n      .innerRadius(radius * 0.7)\r\n      .outerRadius(radius * 0.7);\r\n\r\n    svg.selectAll('text')\r\n      .data(pie)\r\n      .enter().append('text')\r\n      .attr('transform', d => `translate(${label.centroid(d)})`)\r\n      .attr('dy', '0.35em')\r\n      .text(d => `${d.data.TransactionTypeName} (${d.data.PercentageContribution}%)`)\r\n      .style('text-anchor', 'middle')\r\n      .style('font-size', '12px');\r\n\r\n    return () => {\r\n      d3.select(svgRef.current).selectAll('*').remove(); // Clean up on unmount\r\n    };\r\n  }, [data]);\r\n\r\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }}><svg ref={svgRef} /></div>;\r\n};\r\n\r\nexport default PieChart;\r\n\r\n\r\n\r\n"
        }
    ]
}